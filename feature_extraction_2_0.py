# -*- coding: utf-8 -*-
"""Feature extraction 2.0

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19UfSGizMyTWj2kjyi9eWcGJWm6wV70pG
"""

import numpy as np
import OpenEXR as exr
import Imath


import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

from PIL import Image
import matplotlib.pyplot as plt

import torchvision.transforms as transforms
import torchvision.models as models
import os
import copy

from tqdm import tqdm  # For nice progress bar!



def readEXR(filename, convert_to_sRGB=False):
    """Read color + depth data from EXR image file.

    Parameters
    ----------
    filename : str
        File path.

    Returns
    -------
    img : RGB or RGBA image in float32 format. Each color channel
          lies within the interval [0, 1].
          Color conversion from linear RGB to standard RGB is performed
          internally. See https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)
          for more information.

    Z : Depth buffer in float32 format or None if the EXR file has no Z channel.
    """

    exrfile = exr.InputFile(filename)
    header = exrfile.header()

    dw = header['dataWindow']
    isize = (dw.max.y - dw.min.y + 1, dw.max.x - dw.min.x + 1)

    channelData = {}

    # convert all channels in the image to numpy arrays
    for c in header['channels']:
        C = exrfile.channel(c, Imath.PixelType(Imath.PixelType.FLOAT))
        C = np.fromstring(C, dtype=np.float32)
        C = np.reshape(C, isize)

        channelData[c] = C

    colorChannels = ['R', 'G', 'B', 'A'] if 'A' in header['channels'] else ['R', 'G', 'B']
    img = np.concatenate([channelData[c][..., np.newaxis] for c in colorChannels], axis=2)

    # linear to standard RGB
    if convert_to_sRGB:
        img[..., :3] = np.where(img[..., :3] <= 0.0031308,
                                12.92 * img[..., :3],
                                1.055 * np.power(img[..., :3], 1 / 2.4) - 0.055)

    # sanitize image to be in range [0, 1]
    img = np.where(img < 0.0, 0.0, np.where(img > 1.0, 1, img))

    # I dont need Z, discarded
    # Z = None if 'Z' not in header['channels'] else channelData['Z']

    return img


"""Okay, Ima try this again. I will Recalculate the gram matrices, this time useing torch instead of tf
I believe I made some crucial mistakes last time

Todo:


*   Adapt code, its for style transfer now, dont need a lot of whats going on
**  Remove content layer stuff
**  check if module/layer variables can be read after something got pushed through the network
*   After gram generation, check value space, if nescessary normalize (I think it might not be nescessary this time)
*


"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# desired size of the output image
imsize = 224

loader = transforms.Compose([
    # transforms.Resize([imsize, imsize]),  # scale imported image
    transforms.ToTensor()])  # transform it into a torch tensor


def image_loader(image_name):
    if (image_name.endswith(".exr")):
        image = readEXR(image_name)
    else:
        image = Image.open(image_name).convert('RGB')

    image = loader(image).unsqueeze(0)[:, :3, 16:240, 16:240]

    return image.to(device, torch.float)


def imshow(tensor, title=None):
    unloader = transforms.ToPILImage()  # reconvert into PIL image

    image = tensor.cpu().clone()  # we clone the tensor to not do changes on it
    image = image.squeeze(0)  # remove the fake batch dimension
    image = unloader(image)
    plt.figure()
    plt.imshow(image)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated


def gram_matrix(input):
    a, b, c, d = input.size()  # a=batch size(=1)


    features = input.view(a * b, c * d)  # resise F_XL into \hat F_XL

    G = torch.mm(features, features.t())  # compute the gram product

    return G.div(
        c * d)


# class StyleLoss(nn.Module):

#     def __init__(self, target_feature):
#         super(StyleLoss, self).__init__()
#         self.target = gram_matrix(target_feature).detach()

#     def forward(self, input):
#         self.gram = gram_matrix(input)
#         self.loss = F.mse_loss(G, self.target)
#         return input

class StyleExtract(nn.Module):

    def __init__(self):
        super(StyleExtract, self).__init__()
        self.min = float('inf')
        self.max = float('-inf')
        self.hist = np.histogram([])  # Empty histogram

    def forward(self, input):
        self.gram = gram_matrix(input)
        self.gram = self.gram.triu()

        self.min = min(self.min, torch.min(self.gram).item())
        self.max = max(self.max, torch.max(self.gram).item())
        # Update histogram
        self.hist += np.histogram(self.gram.cpu().detach().numpy(), bins=10)

        return input





# create a module to normalize input image so we can easily put it in a
# nn.Sequential
class Normalization(nn.Module):
    def __init__(self, mean, std):
        super(Normalization, self).__init__()
        # .view the mean and std to make them [C x 1 x 1] so that they can
        # directly work with image Tensor of shape [B x C x H x W].
        # B is batch size. C is number of channels. H is height and W is width.
        self.mean = torch.tensor(mean).view(-1, 1, 1)
        self.std = torch.tensor(std).view(-1, 1, 1)

    def forward(self, img):
        # normalize img
        return (img - self.mean) / self.std


# @title Building the model that with layers that produce gram matrices.
# @markdown Iterates over the prebuilt vgg network, makes changes if nescessary (change "layer" to whatever we want to insert in iteration (see Relu)) <br>(**TODO: change max pooling to avg pooling?**). <br>
# @markdown if the layer was one of the style layers we enter our custom style layer in between. that layer does not actually do anything to the data in the network, but gives us a way to extract the style matrix after the image ran though the network
# @markdown Returnes the model and an array to access style matrices.
# desired depth layers to compute style/content losses :


# content_layers_default = ['conv_4']


def get_style_model_and_style_extract_layers(cnn, normalization_mean, normalization_std,
                                             # style_img, content_img,
                                             # content_layers=content_layers_default,
                                             style_layers=['conv1_2', 'conv2_2', 'conv3_4', 'conv4_4', 'conv5_4']):
    # normalization module
    normalization = Normalization(normalization_mean, normalization_std).to(device)

    # just in order to have an iterable access to or list of content/syle
    # losses
    # content_losses = []
    style_grams = []

    # assuming that cnn is a nn.Sequential, so we make a new nn.Sequential
    # to put in modules that are supposed to be activated sequentially
    model = nn.Sequential(normalization)

    i = 1  # increment every time we see a conv resets when pooling
    j = 1  # increase every time we see a pooling
    for layer in cnn.children():
        if isinstance(layer, nn.Conv2d):
            name = 'conv{}_{}'.format(j, i)
            i += 1
        elif isinstance(layer, nn.ReLU):
            name = 'relu{}_{}'.format(j, i)
            # The in-place version doesn't play very nicely with the ContentLoss
            # and StyleLoss we insert below. So we replace with out-of-place
            # ones here.
            layer = nn.ReLU(inplace=False)
        elif isinstance(layer, nn.MaxPool2d):
            name = 'pool{}_{}'.format(j, i)
            layer = nn.AvgPool2d(3)  # @markdown changed to avg pool here like Match did in their paper
            j += 1
            i = 1
        elif isinstance(layer, nn.BatchNorm2d):
            name = 'bn{}_{}'.format(j, i)
        else:
            raise RuntimeError('Unrecognized layer: {}'.format(layer.__class__.__name__))

        model.add_module(name, layer)

        if name in style_layers:
            style_extract = StyleExtract()
            model.add_module("-----------------style_extract_{}".format(j), style_extract)
            style_grams.append(style_extract)

            if name == style_layers[-1]:
                break

    # now we trim off the layers after the last content and style losses
    # for i in range(len(model) - 1, -1, -1):
    #     if isinstance(model[i], StyleExtract):
    #         break

    # model = model[:(i + 1)]

    return model, style_grams  # , content_losses


if __name__ == '__main__':

    cnn = models.vgg19(pretrained=True).features.to(device).eval()

    cnn_normalization_mean = torch.tensor([0.485, 0.456, 0.406]).to(device)
    cnn_normalization_std = torch.tensor([0.229, 0.224, 0.225]).to(device)

    model, styles = get_style_model_and_style_extract_layers(cnn, cnn_normalization_mean, cnn_normalization_std)

    loadDirectory = r'/app/data/renders'
    saveDirectory = r'/app/data/grams'

    grams = {}

    mins = [float('inf')] * 5
    maxs = [float('-inf')] * 5
    hist = [] * 5

    model, styles = get_style_model_and_style_extract_layers(cnn, cnn_normalization_mean, cnn_normalization_std)

    count = 0

    print("Generating Grams")
    for filename in tqdm(os.listdir(loadDirectory)):

        if not filename.endswith(".exr"):
            continue

        loadPath = os.path.join(loadDirectory, filename)
        savePath = os.path.join(saveDirectory, filename + "_ConcatGram")

        if os.path.exists(savePath):
            continue

        im = image_loader(loadPath)

        with torch.no_grad():
            model(im)

        for i, style in enumerate(styles):
            # Update overall min and max
            mins[i] = min(mins[i], style.min)
            maxs[i] = max(maxs[i], style.max)

            # Update histogram
            # hist[i] += style.hist

    print(f'maxs: {maxs}')
    print(f'mins: {mins}')

    """[tensor(637.8943), tensor(554.4865), tensor(405.1444), tensor(45.7615), tensor(4.8098)]
    
    [tensor(-617.9616), tensor(-253.7502), tensor(-148.7658), tensor(-23.1019), tensor(-2.9467)]
    """

    print("normalising and saving Grams")

    # maxs = torch.tensor([637.8943, 554.4865, 405.1444, 45.7615, 4.8098])
    # mins = torch.tensor([-617.9616, -253.7502, -148.7658, -23.1019, -2.9467])

    i = 0
    for filename in tqdm(os.listdir(loadDirectory)):



        concatMat = torch.empty(0)

        if not filename.endswith(".exr"):
            continue

        loadPath = os.path.join(loadDirectory, filename)
        # savePath = os.path.join(saveDirectory, i)
        if not os.path.exists(saveDirectory):
            os.makedirs(saveDirectory)
        savePath = os.path.join(saveDirectory, filename.split(".")[0] + "ConcatGram")

        if os.path.exists(savePath):
            continue

        im = image_loader(loadPath)

        with torch.no_grad():
            model(im)

        for i, style in enumerate(styles):
            matrix = style.gram.cpu()
            matrix = matrix.subtract(mins[i])
            matrix = matrix.div(maxs[i] - mins[i])

            if torch.max(matrix) > 1 or torch.min(matrix) < 0:
                print("ALAAARRMM")

            concatMat = torch.cat([concatMat, torch.flatten(matrix)], dim=0)

        torch.save(concatMat, savePath)


    print(concatMat.shape)

# """# Testing shenanigans"""
#
# from operator import itemgetter
#
# maxItem = [0] * 5
# minMaxItem = [999999999] * 5
# minItem = [10000000000] * 5
# maxMinItem = [-999999] * 5
# # allGrams[3]["gram1"]
#
# for grams in tqdm(allGrams):
#
#     for i in range(5):
#         maxItem[i] = max(maxItem[i], grams['gram' + str(i) + " max"])
#         minMaxItem[i] = min(minMaxItem[i], grams['gram' + str(i) + " max"])
#         minItem[i] = min(minItem[i], grams['gram' + str(i) + " min"])
#         maxMinItem[i] = max(maxMinItem[i], grams['gram' + str(i) + " min"])
#
# print(maxItem)
# print(minMaxItem)
# print(minItem)
# print(maxMinItem)
#
# test = []
#
# test.append(4)
# print(test)
#
# im = image_loader('/content/image.exr')
# model(im)
#
# for style in styles:
#     print("min = {}, max = {}, diff= {}".format(torch.min(style.gram), torch.max(style.gram),
#                                                 torch.min(style.gram) - torch.max(style.gram)))
#     imshow(style.gram)
#
# for style in styles:
#     show = style.gram.add(-torch.min(style.gram))
#     show = show.div(torch.max(show))
#     print("min = {}, max = {}, diff= {}".format(torch.min(show), torch.max(show), torch.min(show) - torch.max(show)))
#     imshow(show)
#     plt.figure()
#     hist = [0] * 100
#     thisHist = np.histogram(show.detach(), bins=10, range=[0, 1])
#     print(thisHist[0])
#     plt.bar(thisHist[1][:10], thisHist[0][:10])
#
# hist = [0] * 100
# thisHist = np.histogram(data, bins=100, range=[-10, 20])
# plt.bar(thisHist[1][:100], hist[:100])
#
# show.save()
#
# # #path = os.path.join(directory,filename)
# path = '/content/image.exr'
#
# image = image_loader(path)
#
# imshow(image)
#
# img.shape
